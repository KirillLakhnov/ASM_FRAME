Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 1
frm.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     locals $$
      4				     org 100h
      5
      6				     ;===========================================
      7				     ; Exit Program
      8				     ;===========================================
      9				     ; Entry:	  None
     10				     ; Exit:	  None
     11				     ; Expects:	  None
     12				     ; Destroys:  AX
     13				     ;===========================================
     14				     EXIT macro
     15
     16					  mov ax, 4c00h	; exit (0)
     17					  int 21h
     18
     19					  endm
     20				     ;===========================================
     21
     22
     23				     ;===========================================
     24				     ; String symbol to	hex value
     25				     ;===========================================
     26				     ; Entry:	  None
     27				     ; Exit:	  None
     28				     ; Expects:	  None
     29				     ; Destroys:  AX
     30				     ;===========================================
     31				     STR_SYMBOL_TO_HEX	     macro
     32									     cmp al, 39h
     33									 jle $$if_bx_jle_39h
     34									 jmp $$else_bx_jle_39h
     35
     36								     $$if_bx_jle_39h:	     sub al, 30h
     37													     jmp $$end_if_bx_jle_39h
     38
     39								     $$else_bx_jle_39h:	     sub al, 37h
     40													     jmp $$end_if_bx_jle_39h
     41
     42								     $$end_if_bx_jle_39h:
     43									     endm
     44				     ;===========================================
     45
     46				     ;===========================================
     47				     ; Clear video memory
     48				     ;===========================================
     49				     ; Entry:	  None
     50				     ; Exit:	  None
     51				     ; Expects:	  None
     52				     ; Destroys:  None
     53				     ;===========================================
     54				     CLEAR_VIDEO macro
     55
     56						     push bx cx
     57
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 2
frm.asm



     58						     mov  bx, 0b800h
     59						     mov  es, bx
     60
     61						     mov  cx, 2001
     62						     $$clear_byte:   mov bx, cx
     63											     add bx, bx
     64
     65										     mov byte ptr es:[bx], 20h
     66											     inc bx
     67											     mov byte ptr es:[bx], 07h
     68										     loop $$clear_byte
     69						     pop bx cx
     70
     71						     endm
     72				     ;===========================================
     73
     74
     75	0100  E8 000D		     Start:  call read_arg
     76
     77	0103  51			     push cx  ;	x
     78	0104  52			     push dx  ;	y
     79	0105  57			     push di  ;	height
     80	0106  50			     push ax  ;	color
     81	0107  53			     push bx  ;	style
     82
     83	0108  E8 0046			     call draw_frame
     84
     85					     EXIT
1    86
1    87	010B  B8 4C00			  mov ax, 4c00h	; exit (0)
1    88	010E  CD 21			  int 21h
1    89
     90
     91				     ;============================================
     92				     ; Read arguments from command line
     93				     ;============================================
     94				     ; Entry:
     95				     ;		  BX = style
     96				     ;		  CX = X, DX = y
     97				     ;		  DI = heigth
     98				     ; Expects:
     99				     ; Destroys:
    100				     ;============================================
    101	0110			     read_arg	     proc
    102	0110  BE 0082					     mov si, 82h ; si =	adress console buffer
    103
    104	0113  E8 0017					     call read_num
    105	0116  8B CB					     mov  cx, bx    ; cx = x
    106	0118  E8 0012					     call read_num
    107	011B  8B D3					     mov  dx, bx    ; dx = y
    108	011D  E8 000D					     call read_num
    109	0120  8B FB					     mov  di, bx    ; di = heigth
    110	0122  52					     push dx
    111	0123  E8 0124					     call scanf_hex
    112	0126  5A					     pop dx
    113	0127  8B C3					     mov  ax, bx    ; ax = color
    114	0129  E8 0001					     call read_num  ; bx = style
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 3
frm.asm



    115
    116	012C  C3					     ret
    117	012D			     read_arg	     endp
    118				     ;============================================
    119
    120				     ;============================================
    121				     ; Read number from	command	line
    122				     ;============================================
    123				     ; Entry:
    124				     ; Exit:	 BX = number
    125				     ; Expects:
    126				     ; Destroys:
    127				     ;============================================
    128	012D			     read_num proc
    129	012D  50			      push ax
    130	012E  33 DB			      xor  bx, bx
    131	0130  33 C0				      $$read_number: xor ax, ax
    132	0132  AC								     lodsb ; al	= consol symbol
    133
    134	0133  3C 2C								     cmp al, 2Ch
    135	0135  74 18								     je	$$end_read
    136
    137	0137  3C 30								     cmp al, 30h
    138	0139  7C 14								     jl	$$end_read
    139
    140	013B  3C 39								     cmp al, 39h
    141	013D  7F 10								     jg	$$end_read
    142
    143	013F  2C 30								     sub al, 30h ; ASCII --> number
    144
    145	0141  50								     push ax
    146
    147	0142  8B C3						     mov ax, bx	 ;<--;
    148	0144  B3 0A						     mov bl, 10d     ;
    149	0146  F6 E3						     mul bl	     ;<-- ax = 10*ax
    150	0148  8B D8						     mov bx, ax
    151
    152	014A  58						     pop ax
    153	014B  03 D8						     add bx, ax
    154	014D  EB E1								     jmp $$read_number
    155
    156	014F  58				      $$end_read:    pop ax
    157	0150  C3								     ret
    158	0151			     read_num endp
    159				     ;============================================
    160
    161				     ;============================================
    162				     ; Draw frame
    163				     ;============================================
    164				     ; Entry:	  p1 = X-COORDINATE upper left corner [bp + 12]
    165				     ;		      p2 = Y-COORDINATE	upper left corner [bp +	10]
    166				     ;		  p3 = HEIGTH frame [bp	+ 8]
    167				     ;		  p4 = COLOR  frame [bp	+ 6]
    168				     ;		  p5 = STYLE  frame [bp	+ 4]
    169				     ; Exit:	  None
    170				     ; Expects:	  Screen size equals 25*80
    171				     ;		  ES = 0b800h
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 4
frm.asm



    172				     ;		  SI = begin adress for	reading	user style and message from cmd	line
    173				     ;		  There	is the mass "frame_styles"
    174				     ;		  There	is the mass "message"
    175				     ; Destroys:  AX, BX, CX, SI, DI, BP
    176				     ;============================================
    177	0151			     draw_frame	 proc
    178						 CLEAR_VIDEO
1   179
1   180	0151  53 51				     push bx cx
1   181
1   182	0153  BB B800				     mov  bx, 0b800h
1   183	0156  8E C3				     mov  es, bx
1   184
1   185	0158  B9 07D1				     mov  cx, 2001
1   186	015B  8B D9				     $$clear_byte:   mov bx, cx
1   187	015D  03 DB									     add bx, bx
1   188
1   189	015F  26: C6 07	20							     mov byte ptr es:[bx], 20h
1   190	0163  43									     inc bx
1   191	0164  26: C6 07	07								     mov byte ptr es:[bx], 07h
1   192	0168  E2 F1								     loop $$clear_byte
1   193	016A  5B 59				     pop bx cx
1   194
    195
    196	016C  55				 push bp
    197	016D  8B EC				 mov  bp, sp
    198
    199	016F  56				 push si
    200
    201	0170  8B 76 04				     mov si, [bp + 4] ;	si = style
    202	0173  83 FE 03				     cmp si, 3
    203	0176  74 03				     je	 $$call_user_style
    204	0178  EB 08 90				     jmp $$not_user_style
    205
    206	017B  5E				     $$call_user_style:	 pop si
    207	017C  E8 00B1										     call user_style
    208	017F  EB 02 90										     jmp $$msg_scanf
    209	0182  5E				     $$not_user_style:	     pop si
    210	0183  E8 00F3					     $$msg_scanf:	 call scanf_msg
    211	0186  BB 03E0r							     lea  bx, message
    212	0189  E8 01D0									     call strlen
    213	018C  83 C1 04									     add  cx, 4	; cx = width
    214
    215	018F  8A 7E 0A					     mov bh, [bp + 10] ; bh = y
    216	0192  8A 5E 0C				 mov bl, [bp + 12] ; bl	= x
    217
    218	0195  E8 006D				 call calc_crd ; bx = begin coordinate
    219							 ;=================================
    220	0198  8B FB					     mov  di, bx ; di =	begin coordinate
    221
    222	019A  8B 76 04					     mov  si, [bp + 4];	si = style
    223	019D  E8 0076					     call style_pointer
    224	01A0  8B D9					     mov  bx, cx ; bx =	width
    225	01A2  B9 0001					     mov  cx, 1
    226	01A5  E8 0032					     call draw_line
    227						 ;=================================
    228	01A8  8B 76 04					     mov  si, [bp + 4];	si = style
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 5
frm.asm



    229	01AB  E8 0068					     call style_pointer
    230	01AE  83 C6 03					     add  si, 3
    231	01B1  8B 4E 08					     mov  cx, [bp + 8]
    232	01B4  83 E9 02					     sub  cx, 2
    233	01B7  E8 0020					     call draw_line
    234							     ;=================================
    235	01BA  8B 76 04					     mov  si, [bp + 4];	si = style
    236	01BD  E8 0056					     call style_pointer
    237	01C0  83 C6 06					     add  si, 6
    238	01C3  B9 0001					     mov  cx, 1
    239	01C6  E8 0011					     call draw_line
    240							     ;=================================
    241	01C9  8A 7E 0A				     mov bh, [bp + 10] ; bh = y
    242	01CC  8A 5E 0C				 mov bl, [bp + 12] ; bl	= x
    243	01CF  8A 46 08				     mov al, [bp + 8]  ; al = heigth
    244	01D2  8A 66 06					     mov ah, [bp + 6]  ; ah = color
    245
    246	01D5  E8 00BE				 call video_prnt_msg
    247
    248	01D8  5D				     pop bp
    249	01D9  C3				 ret
    250	01DA			     draw_frame	 endp
    251				     ;============================================
    252
    253
    254				     ;============================================
    255				     ; Draw line (left,	middle,	rigth symbol)
    256				     ;============================================
    257				     ; Entry:	 BX = width
    258				     ;		 CX = number of	line
    259				     ;		 SI = number first element
    260				     ;		 DI = begin coordinate
    261				     ; Exit:	 DI = new begin	coordinate
    262				     ; Expects:	 ES = 0b800h
    263				     ; Destroys: CX, SI
    264				     ;============================================
    265	01DA			     draw_line	     proc
    266	01DA  53				 push bx
    267
    268	01DB  83 EB 02					     sub bx, 2	; bx = width - 2
    269	01DE  B8 03BCr				 mov ax, offset	frame_styles
    270	01E1  03 F0					     add si, ax	; pointer to style first symbol	- corner
    271
    272	01E3  8A 66 06					     mov ah, [bp + 6]
    273
    274	01E6  53 56		     $$draw_all: push bx si
    275
    276	01E8  AC					     lodsb	   ;<--	draw left corner
    277	01E9  AB					     stosw	   ;
    278
    279	01EA  56					     $$draw_line:    push si			     ;<-- draw line
    280	01EB  AC							     lodsb			     ;
    281	01EC  AB							     stosw		     ;
    282	01ED  5E								     pop  si			     ;
    283																    +
    284				     ;
    285	01EE  4B									 dec bx				     ;
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 6
frm.asm



    286	01EF  83 FB 00									     cmp bx, 0			     ;
    287	01F2  75 F6									     jne $$draw_line ;<--;
    288
    289	01F4  46				 inc si		 ;<-- draw rigth corner
    290	01F5  AC					     lodsb	     ;
    291	01F6  AB					     stosw		     ;
    292
    293	01F7  5E 5B				 pop si	bx
    294
    295	01F9  81 C7 009C				     add di, 156  ;<--;
    296	01FD  2B FB					     sub di, bx	      ;
    297	01FF  2B FB					     sub di, bx	      ;<-- new line on video memory
    298
    299	0201  E2 E3		     loop $$draw_all
    300
    301	0203  5B				 pop bx
    302	0204  C3					     ret
    303	0205			     draw_line	 endp
    304				     ;============================================
    305
    306
    307				     ;============================================
    308				     ; Calculate screen	coordinates
    309				     ;============================================
    310				     ; Entry:	  BH = Y, BL = X
    311				     ; Exit:	  BX = screen coordinates
    312				     ; Expects:	  None
    313				     ; Destroys:  None
    314				     ;============================================
    315	0205			     calc_crd	     proc
    316	0205  50				     push ax
    317
    318	0206  8A C7					     mov al, bh
    319	0208  B4 00					     mov ah, 00h
    320	020A  B7 50					     mov bh, 80d
    321	020C  F6 E7					     mul bh		     ; a = 80*a	(symbol	in string)
    322	020E  B7 00					     mov bh, 00h	     ; bh = null
    323	0210  03 D8					     add bx, ax
    324	0212  D1 E3					     shl bx, 1		     ; bx = 2*bx (x = 2*x)
    325
    326	0214  58				     pop ax
    327	0215  C3				     ret
    328	0216			     calc_crd	     endp
    329				     ;============================================
    330
    331				     include style.asm
1   332				     ;============================================
1   333				     ; Style pointer
1   334				     ;============================================
1   335				     ; Entry:	  SI = style frame
1   336				     ; Exit:	  SI = style pointer
1   337				     ; Expects:	  None
1   338				     ; Destroys:  None
1   339				     ;============================================
1   340	0216			     style_pointer   proc
1   341	0216  50					     push ax
1   342
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 7
frm.asm



1   343	0217  B8 0009					     mov  ax, 9	 ;==================;
1   344	021A  F7 E6					     mul  si	 ;   si	= 9*style   ;
1   345	021C  8B F0				     mov  si, ax ;==================;
1   346
1   347	021E  58					     pop  ax
1   348	021F  C3				     ret
1   349	0220			     style_pointer   endp
1   350				     ;============================================
1   351
1   352
1   353				     ;============================================
1   354				     ; Style element
1   355				     ;============================================
1   356				     ; Entry:	  AX = element number whose style is needed
1   357				     ;		  SI = style frame
1   358				     ; Exit:	  SI = old BX
1   359				     ;		  BX = style element
1   360				     ; Expects:	  There	is the mass "frame_styles"
1   361				     ; Destroys:  None
1   362				     ;============================================
1   363	0220			     style_elem	     proc
1   364	0220  53					     push bx
1   365
1   366	0221  E8 FFF2					     call style_pointer
1   367
1   368	0224  8B DE					     mov bx, si
1   369	0226  03 D8					     add bx, ax
1   370	0228  8D 9F 03BCr				     lea bx, frame_styles + bx ; bx = frame_styles + bx	;
1   371	022C  8B 1F					     mov bx, [bx]	       ; bx = value in bx	;
1   372
1   373	022E  5E					     pop si ; si = old bx
1   374	022F  C3					     ret
1   375	0230			     style_elem	     endp
1   376				     ;============================================
1   377
1   378
1   379				     ;============================================
1   380				     ; User frame style
1   381				     ;============================================
1   382				     ; Entry:	  SI = begin adress for	reading	user style
1   383				     ; Exit:
1   384				     ; Expects:	  There	is the mass "frame_styles"
1   385				     ;		  There	is the mass "consol_prnt"
1   386				     ;		  There	is the mass "user_style_var"
1   387				     ; Destroys:  AX, BX, DX, SI
1   388				     ;============================================
1   389	0230			     user_style	     proc
1   390
1   391	0230  56					     push si
1   392	0231  BE 0003					     mov si, 3
1   393	0234  E8 FFDF				     call style_pointer	; si = style_pointer
1   394	0237  8B FE					     mov di, si
1   395	0239  5E					     pop si
1   396
1   397	023A  B9 0009					     mov cx, 9
1   398	023D  E8 000A					     $$element_frame_prnt:   call scanf_hex
1   399	0240  88 9D 03BCr										     mov  frame_styles + di,+
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 8
frm.asm



    400				     bl
1   401	0244  83 C7 01											     add  di, 1
1   402	0247  E2 F4											     loop		    +
    403				     $$element_frame_prnt
1   404	0249  C3				     ret
1   405	024A			     user_style	     endp
1   406				     ;============================================
1   407
1   408				     ;============================================
1   409				     ; Scanf, while did	not enter a space or enter
1   410				     ;============================================
1   411				     ; Entry:	  None
1   412				     ; Exit:	  BX = hex value
1   413				     ; Expects:	  SI = begin adress for	reading	user style
1   414				     ; Destroys:  None
1   415				     ;============================================
1   416	024A			     scanf_hex	     proc
1   417	024A  50					     push ax
1   418
1   419	024B  33 DB				 xor bx, bx
1   420
1   421	024D  33 C0				 $$scanf_hex:	     xor ax, ax
1   422	024F  AC						     lodsb
1   423
1   424	0250  3C 2C								     cmp al, 2Ch
1   425	0252  74 23								     je	 $$end_scanf
1   426
1   427	0254  3C 68									     cmp al, 68h
1   428	0256  74 F5									     je	 $$scanf_hex
1   429
1   430											     STR_SYMBOL_TO_HEX
2   431	0258  3C 39							     cmp al, 39h
2   432	025A  7E 03							 jle $$if_bx_jle_39h
2   433	025C  EB 06 90							 jmp $$else_bx_jle_39h
2   434
2   435	025F  2C 30						     $$if_bx_jle_39h:	     sub al, 30h
2   436	0261  EB 06 90											     jmp $$end_if_bx_jle_39h
2   437
2   438	0264  2C 37						     $$else_bx_jle_39h:	     sub al, 37h
2   439	0266  EB 01 90											     jmp $$end_if_bx_jle_39h
2   440
2   441	0269							     $$end_if_bx_jle_39h:
1   442
1   443	0269  50								     push ax
1   444
1   445	026A  8B C3							     mov ax, bx	 ;<--;
1   446	026C  B3 10							     mov bl, 16d     ;
1   447	026E  F6 E3							     mul bl	     ;<-- ax = 16*ax
1   448	0270  8B D8							     mov bx, ax
1   449
1   450	0272  58							     pop ax
1   451	0273  03 D8							     add bx, ax
1   452
1   453	0275  EB D6								     jmp $$scanf_hex
1   454	0277						     $$end_scanf:
1   455
1   456	0277  58					     pop ax
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 9
frm.asm



1   457	0278  C3					     ret
1   458	0279			     scanf_hex	     endp
1   459				     ;============================================
1   460
    461				     include msg.asm
1   462				     ;============================================
1   463				     ; Scanf message for frame
1   464				     ;============================================
1   465				     ; Entry:	  None
1   466				     ; Exit:	  None
1   467				     ; Expects:	  There	is the mass "message"
1   468				     ;		  SI =	begin adress for message from cmd line
1   469				     ; Destroys:  None
1   470				     ;============================================
1   471	0279			     scanf_msg	     proc
1   472	0279  50 53 52				     push ax bx	dx
1   473
1   474	027C  33 C0				     xor ax, ax
1   475	027E  AC				     lodsb
1   476	027F  3C 27					     cmp al, 27h
1   477	0281  75 0F					     jne $$end_scanf_msg
1   478
1   479	0283  BB 03E0r					     lea bx, message
1   480
1   481	0286  33 C0					     $$scanf_msg:    xor ax, ax
1   482	0288  AC						     lodsb
1   483	0289  3C 27									     cmp al, 27h
1   484	028B  74 05							     je	 $$end_scanf_msg
1   485
1   486	028D  88 07							     mov [bx], al
1   487	028F  43							     inc bx
1   488	0290  EB F4							     jmp $$scanf_msg
1   489
1   490	0292					     $$end_scanf_msg:
1   491
1   492	0292  5A 5B 58					     pop dx bx ax
1   493
1   494	0295  C3					     ret
1   495	0296			     scanf_msg	     endp
1   496				     ;============================================
1   497
1   498
1   499				     ;============================================
1   500				     ; Print message to	video memory
1   501				     ;============================================
1   502				     ; Entry:	  BH = Y, BL = X
1   503				     ;		  AL = height
1   504				     ;		  AH = color
1   505				     ; Exit:	  None
1   506				     ; Expects:	  There	is the mass "message"
1   507				     ;		  ES = 0b800h
1   508				     ; Destroys:  BX
1   509				     ;============================================
1   510	0296			     video_prnt_msg  proc
1   511	0296  53				     push bx
1   512	0297  BB 03E0r				     lea  bx, message
1   513	029A  E8 00BF					     call strlen
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 10
frm.asm



1   514	029D  5B					     pop  bx
1   515
1   516	029E  E8 0093					     call call_cord_msg
1   517
1   518	02A1  8B F3					     mov si, bx	; si = begin massege coordinate
1   519	02A3  BB 03E0r					     lea bx, message
1   520
1   521	02A6  53					     $$video_prnt_msg_loop:  push bx
1   522
1   523	02A7  8B 1F								     mov bx, [bx]
1   524
1   525	02A9  80 FB 5C												     cmp bl, 5Ch
1   526	02AC  74 11												     je		    +
    527				     $$is_it_new_line_msg
1   528
1   529	02AE  80 FB 24						     $$after_check_new_line: cmp bl, 24h
1   530	02B1  74 31											     je			    +
    531				     $$end_video_prnt_msg_loop
1   532
1   533	02B3  26: 88 1C											     mov byte ptr es:[si], bl
1   534	02B6  46												     inc si
1   535	02B7  26: 88 24												     mov byte ptr   +
    536				     es:[si], ah
1   537	02BA  46											     inc si
1   538
1   539	02BB  5B											     pop bx
1   540	02BC  43											     inc bx
1   541	02BD  EB E7											     jmp		    +
    542				     $$video_prnt_msg_loop
1   543
1   544	02BF  5B					     $$is_it_new_line_msg:   pop bx
1   545	02C0  43									     inc bx
1   546	02C1  53												     push bx
1   547	02C2  8B 1F												     mov bx, [bx]
1   548	02C4  80 FB 6E												     cmp bl, 6eh
1   549	02C7  74 13												     je		    +
    550				     $$new_line_msg
1   551
1   552	02C9  5B						     $$is_it_new_color:	     pop bx
1   553	02CA  E8 0019									     call is_new_color
1   554	02CD  3C 00												     cmp al, 0
1   555	02CF  74 03												     je	 $$old_color
1   556	02D1  EB 07 90												     jmp $$new_color
1   557
1   558	02D4  4B						     $$old_color:		     dec bx
1   559	02D5  53												     push bx
1   560	02D6  8B 1F												     mov bx, [bx]
1   561	02D8  EB D4												     jmp	    +
    562				     $$after_check_new_line
1   563
1   564	02DA  EB CA						     $$new_color:		 jmp $$video_prnt_msg_loop
1   565
1   566	02DC  81 C6 00A0					     $$new_line_msg:	     add si, 160
1   567	02E0  5B												     pop bx
1   568	02E1  43												     inc bx
1   569	02E2  EB C2												     jmp	    +
    570				     $$video_prnt_msg_loop
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 11
frm.asm



1   571
1   572	02E4  5B					     $$end_video_prnt_msg_loop:	pop bx
1   573	02E5  C3				     ret
1   574	02E6			     video_prnt_msg  endp
1   575				     ;============================================
1   576
1   577
1   578				     ;============================================
1   579				     ; Is it new color message
1   580				     ;============================================
1   581				     ; Entry:	  BX = pointer to message
1   582				     ; Exit:	  AL = 1 => new	color	 and AH	= new color
1   583				     ;		  AL = 0 => no new color and AH	= old color
1   584				     ; Expects:
1   585				     ; Destroys:
1   586				     ;============================================
1   587	02E6			     is_new_color proc
1   588	02E6  83 C3 02					      add bx, 2
1   589	02E9  53					      push bx
1   590	02EA  8B 1F					      mov bx, [bx]
1   591	02EC  80 FB 2F					      cmp bl, 2Fh
1   592	02EF  75 3C					      jne $$it_is_not_new_color
1   593	02F1  EB 01 90					      jmp $$it_is_new_color
1   594
1   595	02F4  5B					      $$it_is_new_color:	     pop  bx
1   596	02F5  83 EB 02											     sub  bx, 2
1   597	02F8  53											     push bx
1   598
1   599	02F9  33 D2											     xor dx, dx
1   600	02FB  33 C0											     xor ax, ax
1   601	02FD  B9 0002											     mov cx, 2
1   602
1   603	0300  8A 07					      $$loop_new_color:		     mov al, [bx]
1   604													     STR_SYMBOL_TO_HEX
2   605	0302  3C 39							     cmp al, 39h
2   606	0304  7E 03							 jle $$if_bx_jle_39h
2   607	0306  EB 06 90							 jmp $$else_bx_jle_39h
2   608
2   609	0309  2C 30						     $$if_bx_jle_39h:	     sub al, 30h
2   610	030B  EB 06 90											     jmp $$end_if_bx_jle_39h
2   611
2   612	030E  2C 37						     $$else_bx_jle_39h:	     sub al, 37h
2   613	0310  EB 01 90											     jmp $$end_if_bx_jle_39h
2   614
2   615	0313							     $$end_if_bx_jle_39h:
1   616
1   617	0313  50											     push ax
1   618
1   619	0314  8B C2									     mov ax, dx	 ;<--;
1   620	0316  B2 10									     mov dl, 16d     ;
1   621	0318  F6 E2									     mul dl	    ;<-- ax = 16*ax
1   622	031A  8B D0									     mov dx, ax
1   623
1   624	031C  58									     pop ax
1   625	031D  03 D0											     add dx, ax
1   626
1   627	031F  5B											     pop  bx
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 12
frm.asm



1   628	0320  43											     inc  bx
1   629	0321  53											     push bx
1   630
1   631	0322  E2 DC											     loop $$loop_new_color
1   632
1   633	0324  5B							 pop bx
1   634	0325  43											     inc bx
1   635	0326  8A E2											     mov ah, dl
1   636	0328  B0 01											     mov al, 1
1   637	032A  EB 07 90											     jmp $$end_is_new_color
1   638
1   639	032D  B0 00					      $$it_is_not_new_color: mov al, 0
1   640	032F  5B											     pop bx
1   641	0330  83 EB 02											     sub bx, 2
1   642
1   643	0333  C3					      $$end_is_new_color:    ret
1   644
1   645
1   646	0334			     is_new_color endp
1   647				     ;============================================
1   648
1   649				     ;============================================
1   650				     ; Calculate begin message recording to video
1   651				     ;============================================
1   652				     ; Entry:	  BH = Y, BL = X
1   653				     ;		  AL = height
1   654				     ; Exit:	  BX = coordinate begin	msg
1   655				     ; Expects:	  None
1   656				     ; Destroys:  CX, DX, SI
1   657				     ;============================================
1   658	0334			     call_cord_msg   proc
1   659	0334  50					 push ax
1   660
1   661	0335  E8 FECD				     call calc_crd
1   662
1   663	0338  2C 02					     sub al, 2
1   664	033A  32 E4					     xor ah, ah
1   665	033C  B9 0050					     mov cx, 80
1   666	033F  F7 E1					     mul cx
1   667	0341  03 D8					     add bx, ax
1   668
1   669	0343  83 C3 03					     add bx, 3
1   670
1   671	0346  8B F3					     mov si, bx	; si = coordinate begin	msg
1   672	0348  8B C3					     mov ax, bx	; ax = coordinate begin	msg
1   673	034A  BB 0002					     mov bx, 2
1   674	034D  F7 F3					     div bx	; ax = ax/2
1   675	034F  83 FA 01					     cmp dx, 1	; compare the remainder	of the division	with 1
1   676
1   677	0352  74 03					     je	 $$plus_coord_msg
1   678	0354  EB 02 90					     jmp $$not_plus_coord_msg
1   679
1   680	0357  46					     $$plus_coord_msg:	     inc si	; si = si + 1
1   681	0358  8B DE					     $$not_plus_coord_msg:   mov bx, si	; bx = new coordinate begin msg
1   682
1   683	035A  58						 pop ax
1   684	035B  C3				     ret
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 13
frm.asm



1   685	035C			     call_cord_msg   endp
1   686				     ;============================================
    687				     include str.asm
1   688				     ;============================================
1   689				     ; String length
1   690				     ;============================================
1   691				     ; Entry:	  BX = pointer to begin	string
1   692				     ; Exit:	  CX = string length
1   693				     ; Expects:	  None
1   694				     ; Destroys:  BX
1   695				     ;============================================
1   696	035C			     strlen proc
1   697	035C  B9 0000			    mov	cx, 0
1   698
1   699	035F  53			    $$strlen_loop:	 push bx
1   700
1   701	0360  8B 1F						 mov bx, [bx]
1   702
1   703	0362  80 FB 24						   cmp bl, 24h
1   704	0365  74 2F						   je  $$end_strlen_loop
1   705
1   706	0367  80 FB 5C						 cmp bl, 5Ch
1   707	036A  74 05						 je  $$do_skip_symbol
1   708
1   709	036C  5B						 pop bx
1   710	036D  41			    $$strlen_loop_cont:	 inc cx
1   711	036E  43						   inc bx
1   712
1   713	036F  EB EE						   jmp $$strlen_loop
1   714
1   715	0371  5B			    $$do_skip_symbol:	 pop  bx
1   716	0372  83 C3 03						 add  bx, 3
1   717	0375  53						 push bx
1   718	0376  8B 1F						 mov  bx, [bx]
1   719	0378  80 FB 2F						 cmp  bl, 2Fh
1   720	037B  75 04						 jne $$dont_skip_symbol
1   721	037D  5B						 pop bx
1   722	037E  43						 inc bx
1   723	037F  EB DE						 jmp $$strlen_loop
1   724
1   725	0381  5B			    $$dont_skip_symbol:	 pop  bx
1   726	0382  83 EB 02						 sub  bx, 2
1   727	0385  53						 push bx
1   728	0386  8B 1F						 mov  bx, [bx]
1   729	0388  80 FB 6E						 cmp  bl, 6eh
1   730	038B  EB 05 90						 jmp  $$new_line_skip
1   731	038E  5B						 pop  bx
1   732	038F  4B						 dec  bx
1   733	0390  EB DB						 jmp  $$strlen_loop_cont
1   734
1   735	0392  5B			    $$new_line_skip:	 pop bx
1   736	0393  43						 inc bx
1   737	0394  EB C9						 jmp $$strlen_loop
1   738
1   739	0396  5B			    $$end_strlen_loop:	 pop bx
1   740	0397  C3			    ret
1   741	0398			     strlen endp
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 14
frm.asm



1   742				     ;============================================
1   743
1   744
1   745				     ;===========================================
1   746				     ; String compare
1   747				     ;===========================================
1   748				     ; Entry:	  BX = pointer to begin	1th string
1   749				     ;		  SI = pointer to begin	2th string
1   750				     ; Exit:	  CL = rezult of compare
1   751				     ;		  (1th string == 2th string, if	cx == 0)
1   752				     ; Expects:	  None
1   753				     ; Destroys:  SI, BX
1   754				     ;===========================================
1   755	0398			     strcmp proc
1   756	0398  4B			    dec	 bx
1   757	0399  4E			    dec	 si
1   758	039A  53 56			    push bx si
1   759
1   760	039C  5E 5B			    $$strcmp_loop:	 pop  si bx
1   761	039E  43						 inc  bx
1   762	039F  46						   inc	si
1   763	03A0  53 56						 push bx si
1   764
1   765	03A2  8B 1F						 mov bx, [bx]
1   766	03A4  8B 0C						   mov cx, [si]
1   767
1   768	03A6  80 F9 24						   cmp cl, 24h
1   769	03A9  74 0C						   je $$end_strcmp_loop
1   770
1   771	03AB  80 FB 24						   cmp bl, 24h
1   772	03AE  74 07						   je $$end_strcmp_loop
1   773
1   774	03B0  3A D9						   cmp bl, cl
1   775	03B2  74 E8						   je  $$strcmp_loop
1   776	03B4  EB 01 90						   jmp $$end_strcmp_loop
1   777
1   778	03B7  2A CB			    $$end_strcmp_loop:	 sub cl, bl
1   779
1   780	03B9  5E 5B			    pop	si bx
1   781	03BB  C3			    ret
1   782	03BC			     strcmp endp
1   783				     ;===========================================
    784
    785				     ;============================================
    786
    787	03BC  DA C4 BF		     frame_styles    db	0Dah, 0C4h, 0Bfh ;== style 0 ==;
    788	03BF  B3 20 B3					     db	0B3h, 020h, 0B3h ;    line     ;
    789	03C2  C0 C4 D9					     db	0C0h, 0C4h, 0D9h ;=============;
    790
    791	03C5  03 03 03					     db	03h, 03h,  03h	 ;== style 1 ==;
    792	03C8  03 20 03					     db	03h, 020h, 03h	 ;    heart    ;
    793	03CB  03 03 03					     db	03h, 03h,  03h	 ;=============;
    794
    795	03CE  C9 CD BB					     db	0C9h, 0CDh, 0BBh ;== style 2 ==;
    796	03D1  BA 20 BA					     db	0BAh, 020h, 0BAh ; double line ;
    797	03D4  C8 CD BC					     db	0C8h, 0CDh, 0BCh ;=============;
    798
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 15
frm.asm



    799	03D7  09*(24)						     db	9 dup ('$')	 ; memory for user style (style	3)
    800
    801	03E0  64*(24)		     message	     db	100 dup	('$')	 ; message for frame
    802
    803				     ;============================================
    804
    805				     end Start
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 16
Symbol Table




Symbol Name			  Type	 Value

$$AFTER_CHECK_NEW_LINE		  Near	 DGROUP:02AE
$$CALL_USER_STYLE		  Near	 DGROUP:017B
$$CLEAR_BYTE			  Near	 DGROUP:015B
$$DONT_SKIP_SYMBOL		  Near	 DGROUP:0381
$$DO_SKIP_SYMBOL		  Near	 DGROUP:0371
$$DRAW_ALL			  Near	 DGROUP:01E6
$$DRAW_LINE			  Near	 DGROUP:01EA
$$ELEMENT_FRAME_PRNT		  Near	 DGROUP:023D
$$ELSE_BX_JLE_39H		  Near	 DGROUP:0264
$$ELSE_BX_JLE_39H		  Near	 DGROUP:030E
$$END_IF_BX_JLE_39H		  Near	 DGROUP:0269
$$END_IF_BX_JLE_39H		  Near	 DGROUP:0313
$$END_IS_NEW_COLOR		  Near	 DGROUP:0333
$$END_READ			  Near	 DGROUP:014F
$$END_SCANF			  Near	 DGROUP:0277
$$END_SCANF_MSG			  Near	 DGROUP:0292
$$END_STRCMP_LOOP		  Near	 DGROUP:03B7
$$END_STRLEN_LOOP		  Near	 DGROUP:0396
$$END_VIDEO_PRNT_MSG_LOOP	  Near	 DGROUP:02E4
$$IF_BX_JLE_39H			  Near	 DGROUP:025F
$$IF_BX_JLE_39H			  Near	 DGROUP:0309
$$IS_IT_NEW_COLOR		  Near	 DGROUP:02C9
$$IS_IT_NEW_LINE_MSG		  Near	 DGROUP:02BF
$$IT_IS_NEW_COLOR		  Near	 DGROUP:02F4
$$IT_IS_NOT_NEW_COLOR		  Near	 DGROUP:032D
$$LOOP_NEW_COLOR		  Near	 DGROUP:0300
$$MSG_SCANF			  Near	 DGROUP:0183
$$NEW_COLOR			  Near	 DGROUP:02DA
$$NEW_LINE_MSG			  Near	 DGROUP:02DC
$$NEW_LINE_SKIP			  Near	 DGROUP:0392
$$NOT_PLUS_COORD_MSG		  Near	 DGROUP:0358
$$NOT_USER_STYLE		  Near	 DGROUP:0182
$$OLD_COLOR			  Near	 DGROUP:02D4
$$PLUS_COORD_MSG		  Near	 DGROUP:0357
$$READ_NUMBER			  Near	 DGROUP:0130
$$SCANF_HEX			  Near	 DGROUP:024D
$$SCANF_MSG			  Near	 DGROUP:0286
$$STRCMP_LOOP			  Near	 DGROUP:039C
$$STRLEN_LOOP			  Near	 DGROUP:035F
$$STRLEN_LOOP_CONT		  Near	 DGROUP:036D
$$VIDEO_PRNT_MSG_LOOP		  Near	 DGROUP:02A6
??DATE				  Text	 "03/20/23"
??FILENAME			  Text	 "frm	  "
??TIME				  Text	 "20:50:42"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 FRM
@INTERFACE			  Text	 000H
Turbo Assembler	 Version 4.1	    03/20/23 20:50:43	    Page 17
Symbol Table



@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CALC_CRD			  Near	 DGROUP:0205
CALL_CORD_MSG			  Near	 DGROUP:0334
DRAW_FRAME			  Near	 DGROUP:0151
DRAW_LINE			  Near	 DGROUP:01DA
FRAME_STYLES			  Byte	 DGROUP:03BC
IS_NEW_COLOR			  Near	 DGROUP:02E6
MESSAGE				  Byte	 DGROUP:03E0
READ_ARG			  Near	 DGROUP:0110
READ_NUM			  Near	 DGROUP:012D
SCANF_HEX			  Near	 DGROUP:024A
SCANF_MSG			  Near	 DGROUP:0279
START				  Near	 DGROUP:0100
STRCMP				  Near	 DGROUP:0398
STRLEN				  Near	 DGROUP:035C
STYLE_ELEM			  Near	 DGROUP:0220
STYLE_POINTER			  Near	 DGROUP:0216
USER_STYLE			  Near	 DGROUP:0230
VIDEO_PRNT_MSG			  Near	 DGROUP:0296

Macro Name

CLEAR_VIDEO
EXIT
STR_SYMBOL_TO_HEX

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0444 Word	  Public  CODE
