Turbo Assembler	 Version 4.1	    03/13/23 19:01:41	    Page 1
frm.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     locals $$
      4				     org 100h
      5
      6				     ;===========================================
      7				     ; Exit Program
      8				     ;===========================================
      9				     ; Entry:	  None
     10				     ; Exit:	  None
     11				     ; Expects:	  None
     12				     ; Destroys:  AX
     13				     ;===========================================
     14				     EXIT macro
     15
     16					  mov ax, 4c00h	; exit (0)
     17					  int 21h
     18
     19					  endm
     20				     ;===========================================
     21
     22
     23				     ;===========================================
     24				     ; Clear video memory
     25				     ;===========================================
     26				     ; Entry:	  None
     27				     ; Exit:	  None
     28				     ; Expects:	  None
     29				     ; Destroys:  None
     30				     ;===========================================
     31				     CLEAR_VIDEO macro
     32
     33						     push bx cx
     34
     35						     mov  bx, 0b800h
     36						     mov  es, bx
     37
     38						     mov  cx, 2001
     39						     $$clear_byte:   mov bx, cx
     40											     add bx, bx
     41
     42										     mov byte ptr es:[bx], 20h
     43											     inc bx
     44											     mov byte ptr es:[bx], 07h
     45										     loop $$clear_byte
     46						     pop bx cx
     47
     48						     endm
     49				     ;===========================================
     50
     51
     52				     ;===========================================
     53				     ; Recording to video memory
     54				     ;===========================================
     55				     ; Entry:	  None
     56				     ; Exit:	  SI = SI + 1
     57				     ; Expects:	  ES = 0b800h
Turbo Assembler	 Version 4.1	    03/13/23 19:01:41	    Page 2
frm.asm



     58				     ;		  BL = symbol
     59				     ;		  AH = color
     60				     ; Destroys:  None
     61				     ;===========================================
     62				     REC_VIDEO	     macro
     63
     64						     mov byte ptr es:[si], bl
     65						     inc si
     66						     mov byte ptr es:[si], ah
     67
     68						     endm
     69				     ;===========================================
     70
     71
     72	0100  50 55 8B EC C7 46	02+  Start:  push 30  ;	x
     73	      001E 5D
     74	010A  50 55 8B EC C7 46	02+	     push 7   ;	y
     75	      0007 5D
     76	0114  50 55 8B EC C7 46	02+	     push 10  ;	height
     77	      000A 5D
     78	011E  50 55 8B EC C7 46	02+	     push 4fh ;	color
     79	      004F 5D
     80	0128  50 55 8B EC C7 46	02+	     push 2   ;	style
     81	      0002 5D
     82
     83	0132  E8 0005			     call draw_frame
     84
     85					     EXIT
1    86
1    87	0135  B8 4C00			  mov ax, 4c00h	; exit (0)
1    88	0138  CD 21			  int 21h
1    89
     90
     91				     ;============================================
     92				     ; Draw frame
     93				     ;============================================
     94				     ; Entry:	  p1 = X-COORDINATE upper left corner
     95				     ;		      p2 = Y-COORDINATE	upper left corner
     96				     ;		  p3 = HEIGTH frame
     97				     ;		  p4 = COLOR  frame
     98				     ;		  p6 = STYLE  frame
     99				     ; Exit:	  None
    100				     ; Expects:	  Screen size equals 25*80
    101				     ;		  ES = 0b800h
    102				     ;		  There	is the mass "frame_styles"
    103				     ;		  There	is the mass "message"
    104				     ; Destroys:  AX, BX, CX, SI, DI, BP
    105				     ;============================================
    106	013A			     draw_frame	 proc
    107						 CLEAR_VIDEO
1   108
1   109	013A  53 51				     push bx cx
1   110
1   111	013C  BB B800				     mov  bx, 0b800h
1   112	013F  8E C3				     mov  es, bx
1   113
1   114	0141  B9 07D1				     mov  cx, 2001
Turbo Assembler	 Version 4.1	    03/13/23 19:01:41	    Page 3
frm.asm



1   115	0144  8B D9				     $$clear_byte:   mov bx, cx
1   116	0146  03 DB									     add bx, bx
1   117
1   118	0148  26: C6 07	20							     mov byte ptr es:[bx], 20h
1   119	014C  43									     inc bx
1   120	014D  26: C6 07	07								     mov byte ptr es:[bx], 07h
1   121	0151  E2 F1								     loop $$clear_byte
1   122	0153  5B 59				     pop bx cx
1   123
    124
    125	0155  55				 push bp
    126	0156  8B EC				 mov  bp, sp
    127
    128	0158  8B 76 04				     mov si, [bp + 4] ;	si = style
    129	015B  83 FE 03				     cmp si, 3
    130	015E  74 03				     je	 $$call_user_style
    131	0160  EB 04 90				     jmp $$not_user_style
    132
    133	0163  E8 00B3				     $$call_user_style:	     call user_style
    134	0166  E8 011E				     $$not_user_style:	     call scanf_msg
    135	0169  BB 0384r							     lea  bx, message
    136	016C  E8 0182									     call strlen
    137	016F  83 C1 04									     add  cx, 4	; cx = width
    138
    139	0172  8A 7E 0A					     mov bh, [bp + 10] ; bh = y
    140	0175  8A 5E 0C				 mov bl, [bp + 12] ; bl	= x
    141
    142	0178  E8 0073				 call calc_crd ; bx = begin coordinate
    143							 ;=================================
    144	017B  8B FB					     mov di, bx	; di = begin coordinate
    145
    146	017D  8B 76 04					     mov si, [bp + 4]; si = style
    147	0180  E8 007C					     call style_pointer
    148
    149	0183  8B D9					     mov bx, cx	; bx = width
    150	0185  B9 0001					     mov cx, 1
    151
    152	0188  E8 002F					     call draw_line
    153						 ;=================================
    154	018B  8B 76 04					     mov si, [bp + 4]; si = style
    155	018E  E8 006E					     call style_pointer
    156	0191  83 C6 03					     add si, 3
    157
    158	0194  8B 4E 08					     mov cx, [bp + 8]
    159	0197  83 E9 02					     sub cx, 2
    160
    161	019A  E8 001D					     call draw_line
    162							     ;=================================
    163	019D  8B 76 04					     mov si, [bp + 4]; si = style
    164	01A0  E8 005C					     call style_pointer
    165	01A3  83 C6 06					     add si, 6
    166
    167	01A6  B9 0001					     mov cx, 1
    168
    169	01A9  E8 000E					     call draw_line
    170							     ;=================================
    171	01AC  8A 7E 0A				     mov bh, [bp + 10] ; bh = y
Turbo Assembler	 Version 4.1	    03/13/23 19:01:41	    Page 4
frm.asm



    172	01AF  8A 5E 0C				 mov bl, [bp + 12] ; bl	= x
    173	01B2  8A 46 08				     mov al, [bp + 8]  ; al = heigth
    174
    175	01B5  E8 00ED				 call video_prnt_msg
    176
    177	01B8  5D				     pop bp
    178	01B9  C3				 ret
    179	01BA			     draw_frame	 endp
    180				     ;============================================
    181
    182
    183				     ;============================================
    184				     ; Draw line (left,	middle,	rigth symbol)
    185				     ;============================================
    186				     ; Entry:	 BX = width
    187				     ;		 CX = number of	line
    188				     ;		 SI = number first element
    189				     ;		 DI = begin coordinate
    190				     ; Exit:	 DI = new begin	coordinate
    191				     ; Expects:	 ES = 0b800h
    192				     ; Destroys: CX, SI
    193				     ;============================================
    194	01BA			     draw_line	     proc
    195	01BA  53				 push bx
    196
    197	01BB  83 EB 02					     sub bx, 2	; bx = width - 2
    198	01BE  B8 0345r				 mov ax, offset	frame_styles
    199	01C1  03 F0					     add si, ax	; pointer to style first symbol	- corner
    200
    201	01C3  53		     $$draw_all: push bx
    202	01C4  56				 push si
    203
    204	01C5  AC					     lodsb	     ;<-- draw left corner
    205	01C6  AA					     stosb	     ;
    206											     ;
    207	01C7  8A 46 06				 mov al, [bp + 6];
    208	01CA  AA					     stosb	     ;<--;
    209
    210	01CB  56					     $$draw_line:    push si			     ;<-- draw line
    211	01CC  AC							     lodsb			     ;
    212	01CD  AA							     stosb		     ;
    213	01CE  5E								     pop  si			     ;
    214																    +
    215				     ;
    216	01CF  8A 46 06						     mov al, [bp + 6]	 ;
    217	01D2  AA							     stosb			     ;
    218																    +
    219				     ;
    220	01D3  4B									 dec bx				     ;
    221	01D4  83 FB 00									     cmp bx, 0			     ;
    222	01D7  75 F2									     jne $$draw_line ;<--;
    223
    224	01D9  46				 inc si		 ;<-- draw rigth corner
    225	01DA  AC					     lodsb	     ;
    226	01DB  AA					     stosb	     ;
    227											     ;
    228	01DC  8A 46 06				 mov al, [bp + 6];
Turbo Assembler	 Version 4.1	    03/13/23 19:01:41	    Page 5
frm.asm



    229	01DF  AA					     stosb	     ;<--;
    230
    231	01E0  5E				 pop si
    232	01E1  5B					     pop bx
    233
    234	01E2  81 C7 009C				     add di, 156  ;<--;
    235	01E6  2B FB					     sub di, bx	      ;
    236	01E8  2B FB					     sub di, bx	      ;<-- new line on video memory
    237
    238	01EA  E2 D7		     loop $$draw_all
    239
    240	01EC  5B				 pop bx
    241	01ED  C3					     ret
    242	01EE			     draw_line	 endp
    243				     ;============================================
    244
    245
    246				     ;============================================
    247				     ; Calculate screen	coordinates
    248				     ;============================================
    249				     ; Entry:	  BH = Y, BL = X
    250				     ; Exit:	  BX = screen coordinates
    251				     ; Expects:	  None
    252				     ; Destroys:  None
    253				     ;============================================
    254	01EE			     calc_crd	     proc
    255	01EE  50				     push ax
    256
    257	01EF  8A C7					     mov al, bh
    258	01F1  B4 00					     mov ah, 00h
    259	01F3  B7 50					     mov bh, 80d
    260	01F5  F6 E7					     mul bh		     ; a = 80*a	(symbol	in string)
    261	01F7  B7 00					     mov bh, 00h	     ; bh = null
    262	01F9  03 D8					     add bx, ax
    263	01FB  D1 E3					     shl bx, 1		     ; bx = 2*bx (x = 2*x)
    264
    265	01FD  58				     pop ax
    266	01FE  C3				     ret
    267	01FF			     calc_crd	     endp
    268				     ;============================================
    269
    270				     include style.asm
1   271				     ;============================================
1   272				     ; Style pointer
1   273				     ;============================================
1   274				     ; Entry:	  SI = style frame
1   275				     ; Exit:	  SI = style pointer
1   276				     ; Expects:	  None
1   277				     ; Destroys:  None
1   278				     ;============================================
1   279	01FF			     style_pointer   proc
1   280	01FF  50					     push ax
1   281
1   282	0200  B8 0009					     mov  ax, 9	 ;==================;
1   283	0203  F7 E6					     mul  si	 ;   si	= 9*style   ;
1   284	0205  8B F0				     mov  si, ax ;==================;
1   285
Turbo Assembler	 Version 4.1	    03/13/23 19:01:41	    Page 6
frm.asm



1   286	0207  58					     pop  ax
1   287	0208  C3				     ret
1   288	0209			     style_pointer   endp
1   289				     ;============================================
1   290
1   291
1   292				     ;============================================
1   293				     ; Style element
1   294				     ;============================================
1   295				     ; Entry:	  AX = element number whose style is needed
1   296				     ;		  SI = style frame
1   297				     ; Exit:	  SI = old BX
1   298				     ;		  BX = style element
1   299				     ; Expects:	  There	is the mass "frame_styles"
1   300				     ; Destroys:  None
1   301				     ;============================================
1   302	0209			     style_elem	     proc
1   303	0209  53					     push bx
1   304
1   305	020A  E8 FFF2					     call style_pointer
1   306
1   307	020D  8B DE					     mov bx, si
1   308	020F  03 D8					     add bx, ax
1   309	0211  8D 9F 0345r				     lea bx, frame_styles + bx ; bx = frame_styles + bx	;
1   310	0215  8B 1F					     mov bx, [bx]	       ; bx = value in bx	;
1   311
1   312	0217  5E					     pop si ; si = old bx
1   313	0218  C3					     ret
1   314	0219			     style_elem	     endp
1   315				     ;============================================
1   316
1   317
1   318				     ;============================================
1   319				     ; User frame style
1   320				     ;============================================
1   321				     ; Entry:	  SI = style frame
1   322				     ; Exit:
1   323				     ; Expects:	  There	is the mass "frame_styles"
1   324				     ;		  There	is the mass "consol_prnt"
1   325				     ;		  There	is the mass "user_style_var"
1   326				     ; Destroys:  AX, BX, DX, SI
1   327				     ;============================================
1   328	0219			     user_style	     proc
1   329
1   330	0219  B4 09				     mov ah, 09h
1   331	021B  BA 03E8r					     mov dx, offset consol_prnt_style
1   332	021E  CD 21					     int 21h
1   333
1   334	0220  E8 FFDC				     call style_pointer	; si = style_pointer
1   335
1   336	0223  B9 0009					     mov cx, 9
1   337	0226  BB 03FCr					     $$element_frame_prnt:   lea  bx, user_style_var
1   338	0229  E8 000E								     call scanf
1   339	022C  BB 03FCr											     lea  bx, user_style_var
1   340	022F  E8 001A											     call string_to_hex
1   341	0232  88 84 0345r										     mov  frame_styles + si,+
    342				     al
Turbo Assembler	 Version 4.1	    03/13/23 19:01:41	    Page 7
frm.asm



1   343	0236  46											     inc  si
1   344	0237  E2 ED											     loop		    +
    345				     $$element_frame_prnt
1   346
1   347	0239  C3				     ret
1   348	023A			     user_style	     endp
1   349				     ;============================================
1   350
1   351				     ;============================================
1   352				     ; Scanf, while did	not enter a space or enter
1   353				     ;============================================
1   354				     ; Entry:	  BX = pointer to string
1   355				     ; Exit:	  None
1   356				     ; Expects:	  None
1   357				     ; Destroys:  AX
1   358				     ;============================================
1   359	023A			     scanf   proc
1   360	023A  B4 01			     $$scanf:	     mov ah, 01h
1   361	023C  CD 21					     int 21h
1   362
1   363	023E  3C 0D						     cmp al, 0dh
1   364	0240  74 09						     je	 $$end_scanf
1   365	0242  3C 20						     cmp al, 20h
1   366	0244  74 05						     je	 $$end_scanf
1   367
1   368	0246  88 07						     mov [bx], al
1   369	0248  43						     inc bx
1   370	0249  EB EF						     jmp $$scanf
1   371
1   372	024B  C3			     $$end_scanf: ret
1   373	024C			     scanf   endp
1   374				     ;============================================
1   375
1   376
1   377				     ;============================================
1   378				     ; Сonverts the hex number	written	in the string to a number
1   379				     ;============================================
1   380				     ; Entry:	  BX = pointer to string
1   381				     ; Exit:	  AL = hex number
1   382				     ; Expects:	  None
1   383				     ; Destroys:  None
1   384				     ;============================================
1   385	024C			     string_to_hex   proc
1   386	024C  51 56 53				     push cx si	bx
1   387
1   388	024F  B9 0000					     mov cx, 0
1   389	0252  B8 0000					     mov ax, 0
1   390	0255  53				     $$loop_string_to_hex:   push bx
1   391	0256  8B 1F								     mov bx, [bx]
1   392	0258  32 FF											     xor bh, bh
1   393
1   394	025A  80 FB 68											     cmp bl, 68h
1   395	025D  74 23											     je	$$end_loop
1   396
1   397	025F  80 FB 39								     cmp bl, 39h
1   398	0262  7E 03											     jle $$if_bx_jle_39h
1   399	0264  EB 07 90											     jmp $$else_bx_jle_39h
Turbo Assembler	 Version 4.1	    03/13/23 19:01:41	    Page 8
frm.asm



1   400
1   401	0267  80 EB 30					     $$if_bx_jle_39h:		     sub bl, 30h
1   402	026A  EB 07 90											     jmp $$end_if_bx_jle_39h
1   403
1   404	026D  80 EB 37					     $$else_bx_jle_39h:	     sub bl, 37h
1   405	0270  EB 01 90											     jmp $$end_if_bx_jle_39h
1   406
1   407	0273						     $$end_if_bx_jle_39h:
1   408
1   409	0273  BE 0010					     mov  si, 16 ; si =	16
1   410	0276  E8 00AE					     call pow	 ; si =	16^cx
1   411	0279  F7 E6					     mul  si	 ; ax =	ax*(16^cx)
1   412	027B  03 C3					     add  ax, bx ; ax =	bx + ax*(16^cx)
1   413
1   414	027D  5B					     pop bx
1   415	027E  43					     inc bx
1   416	027F  41					     inc cx
1   417	0280  EB D3					     jmp $$loop_string_to_hex
1   418
1   419	0282  5B					     $$end_loop: pop bx
1   420
1   421	0283  5B 5E 59					     pop bx si cx
1   422	0286  C3				     ret
1   423	0287			     string_to_hex   endp
1   424				     ;============================================
1   425
    426				     include msg.asm
1   427				     ;============================================
1   428				     ; Scanf message for frame
1   429				     ;============================================
1   430				     ; Entry:	  None
1   431				     ; Exit:	  None
1   432				     ; Expects:	  There	is the mass "message"
1   433				     ; Destroys:  None
1   434				     ;============================================
1   435	0287			     scanf_msg proc
1   436	0287  50 53 52			       push ax bx dx
1   437
1   438	028A  B4 09			       mov ah, 09h
1   439	028C  BA 0369r			       mov dx, offset consol_prnt_msg
1   440	028F  CD 21			       int 21h
1   441
1   442	0291  BB 0384r			       lea bx, message
1   443	0294  B4 01			       $$scanf_msg: mov	ah, 01h
1   444	0296  CD 21					    int	21h
1   445
1   446	0298  3C 0D					    cmp	al, 0dh
1   447	029A  74 05					    je	$$end_scanf_msg
1   448
1   449	029C  88 07					    mov	[bx], al
1   450	029E  43					    inc	bx
1   451	029F  EB F3					    jmp	$$scanf_msg
1   452
1   453	02A1				       $$end_scanf_msg:
1   454
1   455	02A1  5A 5B 58			       pop dx bx ax
1   456
Turbo Assembler	 Version 4.1	    03/13/23 19:01:41	    Page 9
frm.asm



1   457	02A4  C3			       ret
1   458	02A5			     scanf_msg endp
1   459				     ;============================================
1   460
1   461
1   462				     ;============================================
1   463				     ; Print message to	video memory
1   464				     ;============================================
1   465				     ; Entry:	  BH = Y, BL = X
1   466				     ;		  AL = height
1   467				     ; Exit:	  None
1   468				     ; Expects:	  There	is the mass "message"
1   469				     ; Destroys:  BX
1   470				     ;============================================
1   471	02A5			     video_prnt_msg  proc
1   472	02A5  53				     push bx
1   473	02A6  BB 0384r				     lea  bx, message
1   474	02A9  E8 0045					     call strlen
1   475	02AC  5B					     pop  bx
1   476
1   477	02AD  E8 001B					     call call_cord_msg
1   478
1   479	02B0  8B F3					     mov si, bx	; si = begin massege coordinate
1   480	02B2  BB 0384r					     lea bx, message
1   481
1   482	02B5  53					     $$video_prnt_msg_loop:  push bx
1   483
1   484	02B6  8B 1F								     mov bx, [bx]
1   485	02B8  80 FB 24											     cmp bl, 24h
1   486	02BB  74 0C											     je			    +
    487				     $$end_video_prnt_msg_loop
1   488
1   489	02BD  26: 88 1C											     mov byte ptr es:[si], bl
1   490	02C0  83 C6 02											     add si, 2
1   491
1   492	02C3  5B											     pop bx
1   493	02C4  83 C3 01											     add bx, 1
1   494	02C7  EB EC											     jmp		    +
    495				     $$video_prnt_msg_loop
1   496
1   497	02C9  5B					     $$end_video_prnt_msg_loop:	pop bx
1   498	02CA  C3				     ret
1   499	02CB			     video_prnt_msg  endp
1   500				     ;============================================
1   501
1   502
1   503				     ;============================================
1   504				     ; Calculate begin massege recording to video
1   505				     ;============================================
1   506				     ; Entry:	  BH = Y, BL = X
1   507				     ;		  AL = height
1   508				     ; Exit:	  BX = coordinate begin	msg
1   509				     ; Expects:	  None
1   510				     ; Destroys:  AX, CX, DX, SI
1   511				     ;============================================
1   512	02CB			     call_cord_msg   proc
1   513
Turbo Assembler	 Version 4.1	    03/13/23 19:01:41	    Page 10
frm.asm



1   514	02CB  E8 FF20				     call calc_crd
1   515
1   516	02CE  2C 02					     sub al, 2
1   517	02D0  32 E4					     xor ah, ah
1   518	02D2  B9 0050					     mov cx, 80
1   519	02D5  F7 E1					     mul cx
1   520	02D7  03 D8					     add bx, ax
1   521
1   522	02D9  83 C3 03					     add bx, 3
1   523
1   524	02DC  8B F3					     mov si, bx	; si = coordinate begin	msg
1   525	02DE  8B C3					     mov ax, bx	; ax = coordinate begin	msg
1   526	02E0  BB 0002					     mov bx, 2
1   527	02E3  F7 F3					     div bx	; ax = ax/2
1   528	02E5  83 FA 01					     cmp dx, 1	; compare the remainder	of the division	with 1
1   529
1   530	02E8  74 03					     je	 $$plus_coord_msg
1   531	02EA  EB 02 90					     jmp $$not_plus_coord_msg
1   532
1   533	02ED  46					     $$plus_coord_msg:	     inc si	; si = si + 1
1   534	02EE  8B DE					     $$not_plus_coord_msg:   mov bx, si	; bx = new coordinate begin msg
1   535
1   536	02F0  C3				     ret
1   537	02F1			     call_cord_msg   endp
1   538				     ;============================================
    539				     include str.asm
1   540				     ;============================================
1   541				     ; String length
1   542				     ;============================================
1   543				     ; Entry:	  BX = pointer to begin	string
1   544				     ; Exit:	  CX = string length
1   545				     ; Expects:	  None
1   546				     ; Destroys:  BX
1   547				     ;============================================
1   548	02F1			     strlen proc
1   549	02F1  B9 0000			    mov	cx, 0
1   550
1   551	02F4  53			    $$strlen_loop:	 push bx
1   552
1   553	02F5  8B 1F						 mov bx, [bx]
1   554
1   555	02F7  80 FB 24						   cmp bl, 24h
1   556	02FA  74 05						   je  $$end_strlen_loop
1   557
1   558	02FC  41						 inc cx
1   559	02FD  5B						 pop bx
1   560	02FE  43						   inc bx
1   561
1   562	02FF  EB F3						   jmp $$strlen_loop
1   563	0301  5B			    $$end_strlen_loop:	 pop bx
1   564	0302  C3			    ret
1   565	0303			     strlen endp
1   566				     ;============================================
1   567
1   568
1   569				     ;===========================================
1   570				     ; String compare
Turbo Assembler	 Version 4.1	    03/13/23 19:01:41	    Page 11
frm.asm



1   571				     ;===========================================
1   572				     ; Entry:	  BX = pointer to begin	1th string
1   573				     ;		  SI = pointer to begin	2th string
1   574				     ; Exit:	  CL = rezult of compare
1   575				     ;		  (1th string == 2th string, if	cx == 0)
1   576				     ; Expects:	  None
1   577				     ; Destroys:  SI, BX
1   578				     ;===========================================
1   579	0303			     strcmp proc
1   580
1   581	0303  4B			    dec	 bx
1   582	0304  4E			    dec	 si
1   583	0305  53 56			    push bx si
1   584	0307  5E 5B			    $$strcmp_loop:	 pop  si bx
1   585	0309  43						 inc  bx
1   586	030A  46						   inc	si
1   587	030B  53 56						 push bx si
1   588
1   589	030D  8B 1F						 mov bx, [bx]
1   590	030F  8B 0C						   mov cx, [si]
1   591
1   592	0311  80 F9 24						   cmp cl, 24h
1   593	0314  74 0C						   je $$end_strcmp_loop
1   594
1   595	0316  80 FB 24						   cmp bl, 24h
1   596	0319  74 07						   je $$end_strcmp_loop
1   597
1   598	031B  3A D9						   cmp bl, cl
1   599	031D  74 E8						   je  $$strcmp_loop
1   600	031F  EB 01 90						   jmp $$end_strcmp_loop
1   601
1   602	0322  2A CB			    $$end_strcmp_loop:	 sub cl, bl
1   603	0324  5E 5B			    pop	si bx
1   604	0326  C3			    ret
1   605	0327			     strcmp endp
1   606				     ;===========================================
    607				     include math.asm
1   608				     ;============================================
1   609				     ; Pow
1   610				     ;============================================
1   611				     ; Entry:	  SI = foundation
1   612				     ;		  CX = index
1   613				     ; Exit:	  SI = rezult
1   614				     ; Expects:	  None
1   615				     ; Destroys:  None
1   616				     ;============================================
1   617	0327			     pow proc
1   618	0327  51 50			 push cx ax
1   619
1   620	0329  83 F9 00			 cmp cx, 0
1   621	032C  74 11			 je  $$pow_loop_exception
1   622
1   623	032E  83 F9 01			 cmp cx, 1
1   624	0331  74 0F			 je  $$end_pow_loop
1   625
1   626	0333  49			 dec cx
1   627
Turbo Assembler	 Version 4.1	    03/13/23 19:01:41	    Page 12
frm.asm



1   628	0334  8B C6			 $$pow_loop: mov ax, si
1   629	0336  F7 E6				     mul si
1   630	0338  8B F0				     mov si, ax
1   631
1   632	033A  E2 F8				     loop $$pow_loop
1   633	033C  EB 04 90				     jmp  $$end_pow_loop
1   634
1   635	033F  BE 0001			 $$pow_loop_exception: mov si, 1
1   636
1   637	0342				 $$end_pow_loop:
1   638
1   639	0342  58 59			 pop ax	cx
1   640	0344  C3			 ret
1   641	0345			     pow endp
1   642				     ;============================================
1   643
    644
    645				     ;============================================
    646
    647	0345  DA C4 BF		     frame_styles    db	0Dah, 0C4h, 0Bfh ;== style 0 ==;
    648	0348  B3 20 B3					     db	0B3h, 020h, 0B3h ;    line     ;
    649	034B  C0 C4 D9					     db	0C0h, 0C4h, 0D9h ;=============;
    650
    651	034E  03 03 03					     db	03h, 03h,  03h	 ;== style 1 ==;
    652	0351  03 20 03					     db	03h, 020h, 03h	 ;    heart    ;
    653	0354  03 03 03					     db	03h, 03h,  03h	 ;=============;
    654
    655	0357  C9 CD BB					     db	0C9h, 0CDh, 0BBh ;== style 2 ==;
    656	035A  BA 20 BA					     db	0BAh, 020h, 0BAh ; double line ;
    657	035D  C8 CD BC					     db	0C8h, 0CDh, 0BCh ;=============;
    658
    659	0360  09*(24)						     db	9 dup ('$')	 ; memory for user style (style	3)
    660
    661	0369  45 6E 74 65 72 20	74+  consol_prnt_msg   db "Enter text for the frame: $"
    662	      65 78 74 20 66 6F	72+
    663	      20 74 68 65 20 66	72+
    664	      61 6D 65 3A 20 24
    665	0384  64*(24)		     message	       db 100 dup ('$')	 ; message for frame
    666
    667	03E8  45 6E 74 65 72 20	66+  consol_prnt_style db "Enter frame style: $"
    668	      72 61 6D 65 20 73	74+
    669	      79 6C 65 3A 20 24
    670	03FC  0A*(24)		     user_style_var    db 10 dup ('$')	 ; variable for	return hex numbers in a	string
    671
    672				     ;============================================
    673
    674				     end Start
Turbo Assembler	 Version 4.1	    03/13/23 19:01:41	    Page 13
Symbol Table




Symbol Name			  Type	 Value

$$CALL_USER_STYLE		  Near	 DGROUP:0163
$$CLEAR_BYTE			  Near	 DGROUP:0144
$$DRAW_ALL			  Near	 DGROUP:01C3
$$DRAW_LINE			  Near	 DGROUP:01CB
$$ELEMENT_FRAME_PRNT		  Near	 DGROUP:0226
$$ELSE_BX_JLE_39H		  Near	 DGROUP:026D
$$END_IF_BX_JLE_39H		  Near	 DGROUP:0273
$$END_LOOP			  Near	 DGROUP:0282
$$END_POW_LOOP			  Near	 DGROUP:0342
$$END_SCANF			  Near	 DGROUP:024B
$$END_SCANF_MSG			  Near	 DGROUP:02A1
$$END_STRCMP_LOOP		  Near	 DGROUP:0322
$$END_STRLEN_LOOP		  Near	 DGROUP:0301
$$END_VIDEO_PRNT_MSG_LOOP	  Near	 DGROUP:02C9
$$IF_BX_JLE_39H			  Near	 DGROUP:0267
$$LOOP_STRING_TO_HEX		  Near	 DGROUP:0255
$$NOT_PLUS_COORD_MSG		  Near	 DGROUP:02EE
$$NOT_USER_STYLE		  Near	 DGROUP:0166
$$PLUS_COORD_MSG		  Near	 DGROUP:02ED
$$POW_LOOP			  Near	 DGROUP:0334
$$POW_LOOP_EXCEPTION		  Near	 DGROUP:033F
$$SCANF				  Near	 DGROUP:023A
$$SCANF_MSG			  Near	 DGROUP:0294
$$STRCMP_LOOP			  Near	 DGROUP:0307
$$STRLEN_LOOP			  Near	 DGROUP:02F4
$$VIDEO_PRNT_MSG_LOOP		  Near	 DGROUP:02B5
??DATE				  Text	 "03/13/23"
??FILENAME			  Text	 "frm	  "
??TIME				  Text	 "19:01:41"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 FRM
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CALC_CRD			  Near	 DGROUP:01EE
CALL_CORD_MSG			  Near	 DGROUP:02CB
CONSOL_PRNT_MSG			  Byte	 DGROUP:0369
CONSOL_PRNT_STYLE		  Byte	 DGROUP:03E8
DRAW_FRAME			  Near	 DGROUP:013A
DRAW_LINE			  Near	 DGROUP:01BA
FRAME_STYLES			  Byte	 DGROUP:0345
MESSAGE				  Byte	 DGROUP:0384
POW				  Near	 DGROUP:0327
SCANF				  Near	 DGROUP:023A
SCANF_MSG			  Near	 DGROUP:0287
START				  Near	 DGROUP:0100
Turbo Assembler	 Version 4.1	    03/13/23 19:01:41	    Page 14
Symbol Table



STRCMP				  Near	 DGROUP:0303
STRING_TO_HEX			  Near	 DGROUP:024C
STRLEN				  Near	 DGROUP:02F1
STYLE_ELEM			  Near	 DGROUP:0209
STYLE_POINTER			  Near	 DGROUP:01FF
USER_STYLE			  Near	 DGROUP:0219
USER_STYLE_VAR			  Byte	 DGROUP:03FC
VIDEO_PRNT_MSG			  Near	 DGROUP:02A5

Macro Name

CLEAR_VIDEO
EXIT
REC_VIDEO

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0406 Word	  Public  CODE
